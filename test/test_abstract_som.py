#!/usr/bin/env python3
# -*- coding: utf-8 -*-
########################################################################################################################

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

########################################################################################################################

import pytest
import decontamination

import numpy as np

########################################################################################################################

som = decontamination.SOM_PCA(4, 4, 4, np.float32, topology = 'square')

som._weights = np.array([
    [[-1.08487280, -0.32087362, +0.75769144, +0.38209260],
     [-0.87059164, -0.42448060, +0.13506313, +0.39338970],
     [-0.65631050, -0.52808756, -0.48756516, +0.40468680],
     [-0.44202930, -0.63169456, -1.11019350, +0.41598392]],

    [[-0.57590544, -0.00335089, +0.87519210, +0.11606709],
     [-0.36162427, -0.10695787, +0.25256380, +0.12736419],
     [-0.14734310, -0.21056485, -0.37006450, +0.13866130],
     [+0.06693809, -0.31417182, -0.99269277, +0.14995840]],

    [[-0.06693809, +0.31417182, +0.99269277, -0.14995840],
     [+0.14734310, +0.21056485, +0.37006450, -0.13866130],
     [+0.36162427, +0.10695787, -0.25256380, -0.12736419],
     [+0.57590544, +0.00335089, -0.87519210, -0.11606709]],

    [[+0.44202930, +0.63169456, +1.11019350, -0.41598392],
     [+0.65631050, +0.52808756, +0.48756516, -0.40468680],
     [+0.87059164, +0.42448060, -0.13506313, -0.39338970],
     [+1.08487280, +0.32087362, -0.75769144, -0.38209260]]
]).reshape(16, 4)

####################################################################################################################

def test_distance_map():

    expected = np.array([
        [0.35355318, 0.60355340, 0.60355335, 0.35355360],
        [0.60355335, 1.00000000, 1.00000000, 0.60355335],
        [0.60355335, 1.00000000, 1.00000000, 0.60355335],
        [0.35355360, 0.60355335, 0.60355340, 0.35355318],
    ])

    assert(np.allclose(som.distance_map(), expected))

####################################################################################################################

def test_activation_map():

    expected = np.array([
        [1592651, 1564103, 1561754, 1592448],
        [1561701, 1531905, 1532798, 1562652],
        [1562305, 1531170, 1531268, 1562266],
        [1592835, 1563195, 1561773, 1595176],
    ], dtype = np.int64)

    np.random.seed(0)

    data = np.random.randn(100_000_000).reshape(25_000_000, 4).astype(np.float32)

    ##

    assert(np.allclose(som.activation_map(data), expected))

####################################################################################################################

def test_winners():

    expected = np.array([13, 13, 5, 9], dtype = np.int64)

    np.random.seed(0)

    data = np.random.randn(4, 4).astype(np.float32)

    ##

    assert(np.allclose(som.winners(data), expected))

########################################################################################################################

if __name__ == '__main__':

    pytest.main([__file__])

########################################################################################################################
