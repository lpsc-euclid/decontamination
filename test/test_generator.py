#!/usr/bin/env python3 -m pytest
# -*- coding: utf-8 -*-
########################################################################################################################

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

########################################################################################################################

import decontamination

import numpy as np

import healpy as hp

########################################################################################################################

def test_number_density_generator():

    expected_lon = np.array([
        126.01545647, -41.13183509, -7.09560011, -2.71581969, -6.79152008,
        -13.85036706, 3.2772017, 24.63480775, 86.00331091, 106.01955206,
        81.49588497, 148.31030266, 183.08844898, 208.74300024, 181.23663654,
        276.14112852, 264.30252081, 245.9767942, 281.28640684, 289.91182476,
        285.9758763, 252.5289269, 297.55148882, 274.09105614, 252.87089393,
        303.42234655, 26.63773061, 59.35947905, 39.66025017, 89.0489417,
        21.55082097, 81.23785575, 57.36642085, 76.23346911, 1.84505749,
        41.39273985, 83.4470072, 139.15943479, 154.29851205, 161.63362375,
        155.70726725, 150.00859263, 112.65865208, 110.55067792, 157.18604472,
        254.41620184, 198.13545306, 209.59322557, 221.79282028, 251.40247133,
        182.05170134, 243.72281926, 249.36970186, 272.81011059, 310.80979686,
        272.10454066, 305.97918168, 296.41698657, 323.13850729, 276.41727232,
        341.73767427, 298.86505685, 300.34116583
    ], dtype = np.float32)

    expected_lat = np.array([
        26.14391181, 0.69075104, -1.2688736, -21.2076004, -26.42637743,
        18.19792238, -18.47895386, -7.79526012, -19.96437895, 20.61933131,
        -3.08780152, -3.2406176, 7.26099909, 8.26300088, -5.61351591,
        31.00687851, 4.83394392, 14.84495009, -0.39657158, 21.41611738,
        21.21765995, 11.86214032, -3.69996762, -3.67200104, 17.02850372,
        -6.55161761, -30.55899305, -34.52424555, -17.82046836, -44.76519578,
        -67.39948856, -51.49646688, -16.25867265, -30.36342959, -55.94144464,
        -7.37554514, -36.48829628, -6.81560173, -80.24693912, -25.53530125,
        -26.97019379, -27.33449194, -21.24560238, -41.39837532, -36.35890093,
        -32.53096748, -35.48569531, -22.73724242, -44.18455045, -28.88967652,
        -40.01947554, -39.39775038, -52.01930696, -46.4603659, -18.19768605,
        -57.57587101, -10.89969664, -21.98421458, -12.4212876, -45.53598591,
        -37.42270883, -80.2606301, -41.07796946
    ], dtype = np.float32)

    nside = 1

    npix = hp.nside2npix(nside)

    pixels = np.arange(npix, dtype = np.int32)
    weight = np.arange(npix, dtype = np.float32)

    generator = decontamination.Generator_NumberDensity(nside, pixels, nest = True, seed = 0)

    lon, lat = list(generator.generate(weight, 1))[0]

    assert np.allclose(lon, expected_lon)

    assert np.allclose(lat, expected_lat)

########################################################################################################################

def test_full_sky_generator():

    expected_lon = np.array([
        -165.24953138, -174.05005121, 112.77728611, 148.59200782, 38.38887928,
        82.61876195, 15.70499693, 156.62607256, 113.70727948, -179.01413994,
        128.66553957, -167.90919289, 82.67596071, -116.76397658, 130.74441205,
        14.92603929, -72.10371941, -27.83260037, -169.80491839, -135.25802046,
        61.42478929, 52.98822417, 41.53864013, -41.87608047, 178.99557688,
        173.10072196
    ], dtype = np.float32)

    expected_lat = np.array([
        21.78248399, 17.51278186, 22.14138874, -12.83576458, -46.87021578,
        26.29395985, 2.90663792, -22.30372122, -1.6233655, 51.16688404,
        60.23709554, -16.52356117, 8.22493458, -20.87076132, 10.87109659,
        -18.9157545, -12.51892047, 51.31084171, -33.07147378, 14.26306451,
        -56.30156869, 41.70444642, 35.04339005, -31.41688261, 48.84817365,
        -61.98979128
    ], dtype = np.float32)

    nside = 1

    generator = decontamination.Generator_FullSkyUniform(nside, seed = 0)

    lon, lat = list(generator.generate(2))[0]

    assert np.allclose(lon, expected_lon)

    assert np.allclose(lat, expected_lat)

########################################################################################################################
