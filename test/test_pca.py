#!/usr/bin/env python3
# -*- coding: utf-8 -*-
########################################################################################################################

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

########################################################################################################################

import unittest
import decontamination

import numpy as np

########################################################################################################################

class JITTests(unittest.TestCase):

    ####################################################################################################################

    def __init__(self, *args, **kwargs):
        
        super().__init__(*args, **kwargs)

        self.pca = decontamination.PCA(4, 4, 4, np.float32)

        np.random.seed(0)

        self.data = np.random.randn(100_000).reshape(25_000, 4)

        self.pca.train(self.data)

    def test1(self):

        expected = np.array([
            [[1.0848671 ,  0.32087582, -0.75769365, -0.38209486],
            [0.87059   ,  0.42447883, -0.13506329, -0.3933928],
            [0.6563127 ,  0.52808183,  0.48756707, -0.40469074],
            [0.44203553,  0.63168484,  1.1101974 , -0.41598868]],

            [[0.5758996 ,  0.0033556 , -0.8751949 , -0.11606701],
            [0.3616224 ,  0.10695861, -0.25256455, -0.12736495],
            [0.14734517,  0.21056162,  0.3700658 , -0.13866289],
            [-0.06693203,  0.3141646 ,  0.99269617, -0.14996085]],

            [[0.06693203, -0.3141646 , -0.99269617,  0.14996085],
            [-0.14734517, -0.21056162, -0.3700658 ,  0.13866289],
            [-0.3616224 , -0.10695861,  0.25256455,  0.12736495],
            [-0.5758996 , -0.0033556 ,  0.8751949 ,  0.11606701]],

            [[-0.44203553, -0.63168484, -1.1101974 ,  0.41598868],
            [-0.6563127 , -0.52808183, -0.48756707,  0.40469074],
            [-0.87059   , -0.42447883,  0.13506329,  0.3933928],
            [-1.0848671 , -0.32087582,  0.75769365,  0.38209486]]
        ])

        self.assertTrue(np.allclose(self.pca.get_centroids(), expected))

    ####################################################################################################################

    def test2(self):

        expected = np.array([
            [0.35355318, 0.6035534 , 0.60355335, 0.3535536],
            [0.60355335, 1.        , 1.        , 0.60355335],
            [0.60355335, 1.        , 1.        , 0.60355335],
            [0.3535536 , 0.60355335, 0.6035534 , 0.35355318]
        ])

        self.assertTrue(np.allclose(self.pca.distance_map(), expected))

########################################################################################################################

if __name__ == '__main__':

    unittest.main()

########################################################################################################################
