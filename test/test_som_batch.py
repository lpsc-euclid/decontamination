#!/usr/bin/env python3
# -*- coding: utf-8 -*-
########################################################################################################################

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

########################################################################################################################

import pytest
import decontamination

import numpy as np

########################################################################################################################

data = np.random.default_rng(seed = 0).random((25_000, 4), np.float32)

########################################################################################################################

som = decontamination.SOM_Batch(4, 4, 4, dtype = np.float32, topology = 'square')

####################################################################################################################

@pytest.mark.parametrize('enable_gpu', [False, True])
def test_centroids_epoch(enable_gpu):

    expected = np.array([
        [[0.5373822, 0.48880973, 0.4349715, 0.506877],
         [0.5176099, 0.492051, 0.45989057, 0.49880785],
         [0.5021911, 0.4981239, 0.49330926, 0.49268693],
         [0.4944685, 0.5062575, 0.5335318, 0.48986676]],

        [[0.50584465, 0.48597503, 0.44446665, 0.51188797],
         [0.49203745, 0.48803505, 0.46598452, 0.5012483],
         [0.48379517, 0.49383226, 0.4946648, 0.49208862],
         [0.48327035, 0.50285083, 0.52911085, 0.48593333]],

        [[0.4741224, 0.4853157, 0.45887586, 0.5124782],
         [0.46750644, 0.48636997, 0.4772342, 0.50160843],
         [0.46734107, 0.4917694, 0.501466, 0.49180615],
         [0.47486955, 0.5014552, 0.530631, 0.48477185]],

        [[0.44522905, 0.48773974, 0.47888815, 0.5091403],
         [0.44648308, 0.48800626, 0.49420998, 0.50008047],
         [0.45509592, 0.49324277, 0.5146117, 0.4919658],
         [0.4711121, 0.5034144, 0.5392277, 0.48615402]]
    ])

    som.init_rand(seed = 0)

    som.train(data, n_epochs = 1, enable_gpu = enable_gpu, threads_per_blocks = 64)

    assert np.allclose(som.get_centroids(), expected, rtol = 1e-4)

####################################################################################################################

@pytest.mark.parametrize('enable_gpu', [False, True])
def test_centroids_iter(enable_gpu):

    expected = np.array([
        [[0.6340795, 0.4867743, 0.39292073, 0.49472743],
         [0.54372925, 0.49804008, 0.43071344, 0.47668746],
         [0.47208962, 0.53404015, 0.5273447, 0.4937409],
         [0.49920613, 0.5252898, 0.64551497, 0.51757103]],

        [[0.55395174, 0.47682744, 0.40600467, 0.5662159],
         [0.47984064, 0.47285992, 0.43745366, 0.5016161],
         [0.454209, 0.50428843, 0.49218637, 0.44941312],
         [0.4911583, 0.52955496, 0.5854421, 0.44759265]],

        [[0.4364403, 0.48405734, 0.42992914, 0.5446534],
         [0.40464297, 0.4423837, 0.4537752, 0.4988582],
         [0.4345465, 0.4572637, 0.47900066, 0.46061632],
         [0.48084748, 0.51564354, 0.54219097, 0.4647759]],

        [[0.3692801, 0.5012412, 0.51202744, 0.49053398],
         [0.38240606, 0.4706546, 0.5140558, 0.49607593],
         [0.44829753, 0.48466414, 0.53709793, 0.4928177],
         [0.5326681, 0.5328836, 0.58445656, 0.49515194]]
    ])

    som.init_rand(seed = 0)

    som.train(data, n_vectors = data.shape[0], enable_gpu = enable_gpu, threads_per_blocks = 64)

    assert np.allclose(som.get_centroids(), expected, rtol = 1e-4)

########################################################################################################################

if __name__ == '__main__':

    pytest.main([__file__])

########################################################################################################################
