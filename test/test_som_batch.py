#!/usr/bin/env python3 -m pytest
# -*- coding: utf-8 -*-
########################################################################################################################

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

########################################################################################################################

import pytest
import decontamination

import numpy as np

########################################################################################################################

data = np.random.default_rng(seed = 0).random((1_000, 4), np.float32)

########################################################################################################################

som = decontamination.SOM_Batch(4, 4, 4, dtype = np.float32, topology = 'square')

####################################################################################################################

@pytest.mark.parametrize('enable_gpu', [False, True])
def test_centroids_epoch(enable_gpu):

    expected = np.array([
        [[0.5624336, 0.49446797, 0.4308011, 0.4966352],
         [0.5414143, 0.49651787, 0.45980114, 0.48850265],
         [0.5251235, 0.5002107, 0.49792755, 0.48182005],
         [0.5170565, 0.5048477, 0.54264647, 0.47786942]],

        [[0.5305004, 0.490954, 0.43813062, 0.5048461],
         [0.51512057, 0.49252442, 0.46357, 0.49329844],
         [0.5056697, 0.4968218, 0.4965854, 0.4826187],
         [0.50446117, 0.5034164, 0.5351318, 0.4745167]],

        [[0.49812794, 0.4904313, 0.44950685, 0.5091107],
         [0.48983157, 0.4914549, 0.47151658, 0.4963036],
         [0.48847353, 0.49623618, 0.49978533, 0.48406783],
         [0.49509957, 0.50454175, 0.53264993, 0.47425258]],

        [[0.46819916, 0.4939348, 0.46598935, 0.5092667],
         [0.468174, 0.4945336, 0.48479864, 0.4974424],
         [0.4758287, 0.49977162, 0.5088839, 0.4860148],
         [0.49090788, 0.509474, 0.53683037, 0.47670108]]
    ], dtype = np.float32)

    som.init_rand(seed = 0)

    som.train(data, n_epochs = 1, enable_gpu = enable_gpu, threads_per_blocks = 64)

    assert np.allclose(som.centroids, expected, rtol = 1e-4)

####################################################################################################################

@pytest.mark.parametrize('enable_gpu', [False, True])
def test_centroids_iter(enable_gpu):

    expected = np.array([
        [[0.66173524, 0.50246555, 0.38239083, 0.48251325],
         [0.572247, 0.51970875, 0.42774507, 0.4704419],
         [0.4983138, 0.546849, 0.5385956, 0.49204528],
         [0.5271483, 0.52111757, 0.6644441, 0.5099671]],

        [[0.5800161, 0.48486698, 0.39684913, 0.5626516],
         [0.49947622, 0.49279845, 0.43604815, 0.497607],
         [0.47626227, 0.5195607, 0.4990893, 0.44585142],
         [0.51595086, 0.53218716, 0.5992866, 0.43696788]],

        [[0.4624004, 0.49124935, 0.4182833, 0.5590947],
         [0.4218759, 0.45629722, 0.4430399, 0.5072158],
         [0.45610145, 0.47395164, 0.4738438, 0.46006235],
         [0.50191486, 0.53183264, 0.54718935, 0.45321885]],

        [[0.39086902, 0.5258164, 0.48913047, 0.5091101],
         [0.4033599, 0.49260813, 0.49441096, 0.50959235],
         [0.4726941, 0.5083045, 0.52174985, 0.49210057],
         [0.54680055, 0.56188756, 0.57836324, 0.4871521]]
    ])

    som.init_rand(seed = 0)

    som.train(data, n_vectors = data.shape[0], enable_gpu = enable_gpu, threads_per_blocks = 64)

    assert np.allclose(som.centroids, expected, rtol = 1e-4)

########################################################################################################################
