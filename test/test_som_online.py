#!/usr/bin/env python3 -m pytest
# -*- coding: utf-8 -*-
########################################################################################################################

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

########################################################################################################################

import decontamination

import numpy as np

########################################################################################################################

data = np.random.default_rng(seed = 0).random((25_000, 4), np.float32)

########################################################################################################################

som = decontamination.SOM_Online(4, 4, 4, dtype = np.float32, topology = 'square')

####################################################################################################################

def test_centroids_epoch():

    expected = np.array([
        [[0.42434192, 0.4313746, 0.6314928, 0.4303455],
         [0.40088618, 0.4905263, 0.5490823, 0.36797205],
         [0.38297942, 0.5576409, 0.47568932, 0.34981096],
         [0.3648115, 0.61074746, 0.438604, 0.34619355]],

        [[0.47230792, 0.40924293, 0.5254587, 0.4411669],
         [0.4561938, 0.45208892, 0.42695683, 0.38369063],
         [0.4430029, 0.50279456, 0.34995863, 0.37014717],
         [0.4251146, 0.5507915, 0.3185692, 0.3720538]],

        [[0.5326678, 0.38281366, 0.4155064, 0.4692226],
         [0.5167223, 0.40349448, 0.31738138, 0.40270802],
         [0.5043199, 0.43680266, 0.24784835, 0.38016915],
         [0.48681706, 0.4804396, 0.22342062, 0.3813466]],

        [[0.5814714, 0.36759514, 0.3323821, 0.50771254],
         [0.5619757, 0.36889845, 0.24751386, 0.42586994],
         [0.5498622, 0.38958672, 0.18885592, 0.38805836],
         [0.53447276, 0.428252, 0.16794921, 0.38263935]]
    ])

    som.init_rand(seed = 0)

    som.train(data, n_epochs = 1)

    assert np.allclose(som.centroids, expected)

####################################################################################################################

def test_centroids_iter():

    expected = np.array([
        [[0.7117795, 0.43717223, 0.763071, 0.24134761],
         [0.55751026, 0.2541241, 0.798897, 0.2968851],
         [0.3194617, 0.44264966, 0.75058883, 0.4138472],
         [0.22563428, 0.77181834, 0.7676845, 0.4677112]],

        [[0.76543444, 0.4361408, 0.75715286, 0.53524894],
         [0.60637903, 0.26792875, 0.7152448, 0.6121179],
         [0.32680917, 0.38125524, 0.591757, 0.6982698],
         [0.23380098, 0.6825557, 0.6073573, 0.6950784]],

        [[0.79390186, 0.56145495, 0.5304002, 0.72755986],
         [0.6781912, 0.33340603, 0.39933646, 0.6781923],
         [0.37673783, 0.34108075, 0.2734345, 0.6632377],
         [0.25893596, 0.6332716, 0.26643777, 0.621895]],

        [[0.8007328, 0.6885004, 0.29137775, 0.64401907],
         [0.73461807, 0.39238647, 0.19124298, 0.4807802],
         [0.44881266, 0.34901065, 0.17372255, 0.37797633],
         [0.29591972, 0.6689915, 0.2439164, 0.30029908]]
    ])

    som.init_rand(seed = 0)

    som.train(data, n_vectors = data.shape[0])

    print(decontamination.array_to_string(som.centroids))

    assert np.allclose(som.centroids, expected)

########################################################################################################################
