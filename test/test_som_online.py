#!/usr/bin/env python3 -m pytest
# -*- coding: utf-8 -*-
########################################################################################################################

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

########################################################################################################################

import decontamination

import numpy as np

########################################################################################################################

data = np.random.default_rng(seed = 0).random((1_000, 4), np.float32)

########################################################################################################################

som = decontamination.SOM_Online(4, 4, 4, dtype = np.float32, topology = 'square')

####################################################################################################################

def test_centroids_epoch():

    expected = np.array([
        [[0.629588, 0.6525393, 0.3566047, 0.40567273],
         [0.57902455, 0.56080836, 0.34112895, 0.4031404],
         [0.5074931, 0.44368172, 0.32830733, 0.41158566],
         [0.4363714, 0.3452287, 0.3230441, 0.43202573]],

        [[0.58724904, 0.6340493, 0.37475222, 0.35967287],
         [0.54409605, 0.5517498, 0.3668969, 0.3686372],
         [0.48239544, 0.44158325, 0.36859405, 0.39153737],
         [0.4202829, 0.34163353, 0.38051024, 0.42594135]],

        [[0.51898575, 0.60106623, 0.40084025, 0.29735044],
         [0.48636618, 0.53484863, 0.40576997, 0.32226947],
         [0.4392072, 0.4373482, 0.42990023, 0.3686461],
         [0.39128497, 0.33637, 0.4668629, 0.4256489]],

        [[0.45549375, 0.5644698, 0.43329656, 0.23921545],
         [0.43098053, 0.51022923, 0.453749, 0.27873376],
         [0.3992045, 0.42162156, 0.5015434, 0.3491033],
         [0.36994183, 0.32050017, 0.5614766, 0.42982483]]
    ])

    som.init_rand(seed = 0)

    som.train(data, n_epochs = 1)

    assert np.allclose(som.centroids, expected)

####################################################################################################################

def test_centroids_iter():

    expected = np.array([
        [[0.31833282, 0.63345104, 0.69216734, 0.21736185],
         [0.33760622, 0.711332, 0.67420644, 0.46396142],
         [0.28696057, 0.5261116, 0.48875582, 0.7127953],
         [0.2536148, 0.28950694, 0.36265212, 0.6643739]],

        [[0.4500157, 0.36114985, 0.7513553, 0.3297186],
         [0.56632304, 0.55814576, 0.6958023, 0.51946354],
         [0.4953495, 0.61018825, 0.4256511, 0.649313],
         [0.33955285, 0.46889713, 0.2713653, 0.5833436]],

        [[0.6129871, 0.236452, 0.7598251, 0.52373123],
         [0.71471566, 0.41940466, 0.585718, 0.5928361],
         [0.6945653, 0.6220647, 0.3769081, 0.48670462],
         [0.5155368, 0.5656291, 0.2781708, 0.38001975]],

        [[0.68939847, 0.16323249, 0.5232994, 0.5547049],
         [0.7318143, 0.26760104, 0.3485392, 0.6143274],
         [0.68362206, 0.42715007, 0.29747555, 0.3479674],
         [0.4713035, 0.4087093, 0.23720984, 0.20895319]]
    ])

    som.init_rand(seed = 0)

    som.train(data, n_vectors = data.shape[0])

    assert np.allclose(som.centroids, expected)

########################################################################################################################
