#!/usr/bin/env python3
# -*- coding: utf-8 -*-
########################################################################################################################

import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

########################################################################################################################

import unittest
import decontamination

import numpy as np

########################################################################################################################

class JITTests(unittest.TestCase):

    ####################################################################################################################

    def __init__(self, *args, **kwargs):
        
        super().__init__(*args, **kwargs)

        np.random.seed(0)

        ##

        self.som = decontamination.SOM_PCA(4, 4, 4, np.float32)

        self.data = np.random.randn(100_000).reshape(25_000, 4)

        self.som.train(self.data)

    ####################################################################################################################

    def test1(self):

        expected = np.array([
            [[-1.0848728, -0.32087362, 0.75769144, 0.3820926],
            [-0.87059164, -0.4244806, 0.13506313, 0.3933897],
            [-0.6563105, -0.52808756, -0.48756516, 0.4046868],
            [-0.4420293, -0.63169456, -1.1101935, 0.41598392]],

            [[-0.57590544, -0.00335089, 0.8751921, 0.11606709],
            [-0.36162427, -0.10695787, 0.2525638, 0.12736419],
            [-0.1473431, -0.21056485, -0.3700645, 0.1386613],
            [0.06693809, -0.31417182, -0.99269277, 0.1499584]],

            [[-0.06693809, 0.31417182, 0.99269277, -0.1499584],
            [0.1473431, 0.21056485, 0.3700645, -0.1386613],
            [0.36162427, 0.10695787, -0.2525638, -0.12736419],
            [0.57590544, 0.00335089, -0.8751921, -0.11606709]],

            [[0.4420293, 0.63169456, 1.1101935, -0.41598392],
            [0.6563105, 0.52808756, 0.48756516, -0.4046868],
            [0.87059164, 0.4244806, -0.13506313, -0.3933897],
            [1.0848728, 0.32087362, -0.75769144, -0.3820926]]
        ])

        self.assertTrue(np.allclose(self.som.get_centroids(), expected))

    ####################################################################################################################

    def test2(self):

        expected = np.array([
            [0.35355318, 0.60355340, 0.60355335, 0.35355360],
            [0.60355335, 1.00000000, 1.00000000, 0.60355335],
            [0.60355335, 1.00000000, 1.00000000, 0.60355335],
            [0.35355360, 0.60355335, 0.60355340, 0.35355318],
        ])

        self.assertTrue(np.allclose(self.som.distance_map(), expected))

########################################################################################################################

if __name__ == '__main__':

    unittest.main()

########################################################################################################################
